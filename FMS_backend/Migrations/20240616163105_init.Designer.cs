// <auto-generated />
using System;
using FMS_backend.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FMS_backend.Migrations
{
    [DbContext(typeof(FmsDbContext))]
    [Migration("20240616163105_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FMS_backend.Models.BankOperationF.BankOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("FinancialPersonId")
                        .HasColumnType("int");

                    b.Property<double>("GrossAmount")
                        .HasColumnType("float");

                    b.Property<double>("NetAmount")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("FinancialPersonId");

                    b.ToTable("BankOperation", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("FMS_backend.Models.BankOperationF.Tax", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Rate")
                        .HasColumnType("float");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Taxes");
                });

            modelBuilder.Entity("FMS_backend.Models.FinancialOperationF.FinancialPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChiefOfFinanceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("datetime2");

                    b.Property<double>("Income")
                        .HasColumnType("float");

                    b.Property<bool>("IsRealised")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("PotentialIncome")
                        .HasColumnType("float");

                    b.Property<int>("RiskValue")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChiefOfFinanceId");

                    b.ToTable("FinancialPlan", (string)null);
                });

            modelBuilder.Entity("FMS_backend.Models.FinancialOperationF.FinancialPrediction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("datetime2");

                    b.Property<int>("FinancialPersonId")
                        .HasColumnType("int");

                    b.Property<double>("Income")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Profit")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("FinancialPersonId");

                    b.ToTable("FinancialPrediction", (string)null);
                });

            modelBuilder.Entity("FMS_backend.Models.FinancialOperationF.FinancialReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("datetime2");

                    b.Property<int>("FinancialPersonId")
                        .HasColumnType("int");

                    b.Property<double>("Income")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Turnover")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("FinancialPersonId");

                    b.ToTable("FinancialReport", (string)null);
                });

            modelBuilder.Entity("FMS_backend.Models.FirmF.Firm", b =>
                {
                    b.Property<string>("NIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("DateOfDelivery")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfRegistration")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Discount")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeOfCustomer")
                        .HasColumnType("int");

                    b.HasKey("NIP");

                    b.ToTable("Firms");

                    b.HasDiscriminator<int>("TypeOfCustomer").HasValue(1);
                });

            modelBuilder.Entity("FMS_backend.Models.TransactionF.BankAccount", b =>
                {
                    b.Property<string>("AccountNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("BudgetId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("AccountNumber");

                    b.HasIndex("BudgetId");

                    b.ToTable("BankAccount", (string)null);
                });

            modelBuilder.Entity("FMS_backend.Models.TransactionF.Budget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Budget", (string)null);
                });

            modelBuilder.Entity("FMS_backend.Models.TransactionF.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("BudgetId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OperationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusType")
                        .HasColumnType("int");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BudgetId");

                    b.HasIndex("UserId");

                    b.ToTable("Transaction", (string)null);
                });

            modelBuilder.Entity("FMS_backend.Models.UserF.ContactDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ContactDetails");
                });

            modelBuilder.Entity("FMS_backend.Models.UserF.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("FMS_backend.Models.UserF.PhoneNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ContactDetailsId")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContactDetailsId");

                    b.ToTable("PhoneNumber");
                });

            modelBuilder.Entity("FMS_backend.Models.UserF.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("ReceiptTax", b =>
                {
                    b.Property<int>("ReceiptsId")
                        .HasColumnType("int");

                    b.Property<int>("TaxesId")
                        .HasColumnType("int");

                    b.HasKey("ReceiptsId", "TaxesId");

                    b.HasIndex("TaxesId");

                    b.ToTable("ReceiptTax");
                });

            modelBuilder.Entity("FMS_backend.Models.BankOperationF.Invoice", b =>
                {
                    b.HasBaseType("FMS_backend.Models.BankOperationF.BankOperation");

                    b.Property<string>("Buyer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Seller")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.ToTable("Invoice", (string)null);
                });

            modelBuilder.Entity("FMS_backend.Models.BankOperationF.Receipt", b =>
                {
                    b.HasBaseType("FMS_backend.Models.BankOperationF.BankOperation");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("FirmId")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("FirmId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("Receipt", (string)null);
                });

            modelBuilder.Entity("FMS_backend.Models.UserF.Admin", b =>
                {
                    b.HasBaseType("FMS_backend.Models.UserF.User");

                    b.ToTable("Admin", (string)null);
                });

            modelBuilder.Entity("FMS_backend.Models.UserF.ChiefOfFinance", b =>
                {
                    b.HasBaseType("FMS_backend.Models.UserF.User");

                    b.Property<DateTime>("DateOfEmployment")
                        .HasColumnType("datetime2");

                    b.Property<string>("FinancialScore")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("ChiefOfFinance", (string)null);
                });

            modelBuilder.Entity("FMS_backend.Models.UserF.FinancialPerson", b =>
                {
                    b.HasBaseType("FMS_backend.Models.UserF.User");

                    b.Property<string>("FinancialPersonRoles")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfPredictions")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfReports")
                        .HasColumnType("int");

                    b.Property<string>("Rank")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Specialization")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToTable("FinancialPerson", (string)null);
                });

            modelBuilder.Entity("FMS_backend.Models.BankOperationF.BankOperation", b =>
                {
                    b.HasOne("FMS_backend.Models.UserF.FinancialPerson", "FinancialPerson")
                        .WithMany("BankOperations")
                        .HasForeignKey("FinancialPersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FinancialPerson");
                });

            modelBuilder.Entity("FMS_backend.Models.FinancialOperationF.FinancialPlan", b =>
                {
                    b.HasOne("FMS_backend.Models.UserF.ChiefOfFinance", "ChiefOfFinance")
                        .WithMany("FinancialPlans")
                        .HasForeignKey("ChiefOfFinanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChiefOfFinance");
                });

            modelBuilder.Entity("FMS_backend.Models.FinancialOperationF.FinancialPrediction", b =>
                {
                    b.HasOne("FMS_backend.Models.UserF.FinancialPerson", "FinancialPerson")
                        .WithMany("FinancialPredictions")
                        .HasForeignKey("FinancialPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FinancialPerson");
                });

            modelBuilder.Entity("FMS_backend.Models.FinancialOperationF.FinancialReport", b =>
                {
                    b.HasOne("FMS_backend.Models.UserF.FinancialPerson", "FinancialPerson")
                        .WithMany("FinancialReports")
                        .HasForeignKey("FinancialPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FinancialPerson");
                });

            modelBuilder.Entity("FMS_backend.Models.TransactionF.BankAccount", b =>
                {
                    b.HasOne("FMS_backend.Models.TransactionF.Budget", "Budget")
                        .WithMany("BankAccounts")
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Budget");
                });

            modelBuilder.Entity("FMS_backend.Models.TransactionF.Transaction", b =>
                {
                    b.HasOne("FMS_backend.Models.TransactionF.Budget", "Budget")
                        .WithMany("Transactions")
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FMS_backend.Models.UserF.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Budget");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FMS_backend.Models.UserF.PhoneNumber", b =>
                {
                    b.HasOne("FMS_backend.Models.UserF.ContactDetails", "ContactDetails")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("ContactDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactDetails");
                });

            modelBuilder.Entity("ReceiptTax", b =>
                {
                    b.HasOne("FMS_backend.Models.BankOperationF.Receipt", null)
                        .WithMany()
                        .HasForeignKey("ReceiptsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FMS_backend.Models.BankOperationF.Tax", null)
                        .WithMany()
                        .HasForeignKey("TaxesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FMS_backend.Models.BankOperationF.Invoice", b =>
                {
                    b.HasOne("FMS_backend.Models.BankOperationF.BankOperation", null)
                        .WithOne()
                        .HasForeignKey("FMS_backend.Models.BankOperationF.Invoice", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FMS_backend.Models.BankOperationF.Receipt", b =>
                {
                    b.HasOne("FMS_backend.Models.UserF.Employee", "Employee")
                        .WithMany("Receipts")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS_backend.Models.FirmF.Firm", "Firm")
                        .WithMany("Receipts")
                        .HasForeignKey("FirmId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS_backend.Models.BankOperationF.BankOperation", null)
                        .WithOne()
                        .HasForeignKey("FMS_backend.Models.BankOperationF.Receipt", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FMS_backend.Models.BankOperationF.Invoice", "Invoice")
                        .WithMany("Receipts")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Firm");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("FMS_backend.Models.UserF.Admin", b =>
                {
                    b.HasOne("FMS_backend.Models.UserF.User", null)
                        .WithOne()
                        .HasForeignKey("FMS_backend.Models.UserF.Admin", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FMS_backend.Models.UserF.ChiefOfFinance", b =>
                {
                    b.HasOne("FMS_backend.Models.UserF.User", null)
                        .WithOne()
                        .HasForeignKey("FMS_backend.Models.UserF.ChiefOfFinance", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FMS_backend.Models.UserF.FinancialPerson", b =>
                {
                    b.HasOne("FMS_backend.Models.UserF.User", null)
                        .WithOne()
                        .HasForeignKey("FMS_backend.Models.UserF.FinancialPerson", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FMS_backend.Models.FirmF.Firm", b =>
                {
                    b.Navigation("Receipts");
                });

            modelBuilder.Entity("FMS_backend.Models.TransactionF.Budget", b =>
                {
                    b.Navigation("BankAccounts");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("FMS_backend.Models.UserF.ContactDetails", b =>
                {
                    b.Navigation("PhoneNumbers");
                });

            modelBuilder.Entity("FMS_backend.Models.UserF.Employee", b =>
                {
                    b.Navigation("Receipts");
                });

            modelBuilder.Entity("FMS_backend.Models.UserF.User", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("FMS_backend.Models.BankOperationF.Invoice", b =>
                {
                    b.Navigation("Receipts");
                });

            modelBuilder.Entity("FMS_backend.Models.UserF.ChiefOfFinance", b =>
                {
                    b.Navigation("FinancialPlans");
                });

            modelBuilder.Entity("FMS_backend.Models.UserF.FinancialPerson", b =>
                {
                    b.Navigation("BankOperations");

                    b.Navigation("FinancialPredictions");

                    b.Navigation("FinancialReports");
                });
#pragma warning restore 612, 618
        }
    }
}
